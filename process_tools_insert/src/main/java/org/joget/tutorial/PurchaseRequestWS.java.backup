package org.joget.tutorial;


import java.net.http.HttpClient;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;

import javax.sql.DataSource;

import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.HttpClientBuilder;
import org.joget.apps.app.service.AppUtil;
import org.joget.commons.util.LogUtil;
import org.joget.plugin.base.DefaultApplicationPlugin;
import org.json.JSONException;
import org.json.JSONObject;

public class PurchaseRequestWS extends DefaultApplicationPlugin {
    
    @Override
    public String getName() {
        return "this is Webservice processtools to POST data plugin";
    }
    @Override
    public String getClassName() {
        return getName();
    }

    @Override
    public String getLabel() {
        return "WS-PT plugin";
    }

    @Override
    public String getPropertyOptions() {
        return AppUtil.readPluginResource(getClassName(), "properties/StoreDataWS.json",null,true,null);
    }

    @Override
    public String getDescription() {
        return "this is plugin at process tools to post data";
    }


    @Override
    public String getVersion() {
        return "1.0.0";
    }

    @Override
    public Object execute(Map arg0) {
        // dapatkan WS URL dari properti
        String WSURL = getPropertyString("url");

        // dapatkan nilai parent ID dari properti
        String parentId = getPropertyString("parentId");

        LogUtil.info(this.getClassName(), "WSURL : " + WSURL);
        LogUtil.info(this.getClassName(), "parentId : " + parentId);

        if (parentId != null && !"".equals(parentId)) {
            // dapatkan data purchase Item dari database berdasarkan parent ID
            List<Item> listItems = getPurchaseItems(parentId);
            // Loop data purchase item, panggil Web Service
            for(Item item : listItems) {
            callWebService(item, WSURL);
            }
        }

        return null; 
    }

    public class Item {
        private String id;
        private String name;
        private String quantity;
        private String price;

        public String getId() { return id; } 
        
        public void setId(String N)
        {
            this.id = N;
        }

        public String getName() { return name; } 
        
        public void setName(String N)
        {
            this.name = N;
        }

        public String getQuantity() { return quantity; } 
        
        public void setQuantity(String Num)
        {
            this.quantity = Num;
        }
        
        public String getPrice() { return price; } 
        
        public void setPrice(String Num)
        {
            this.price = Num;
        }

    }
    
    // get the data
    private List<Item> getPurchaseItems(String parentId){
            List<Item> list = new ArrayList();

            Connection con = null;
            try {
                DataSource ds = (DataSource) AppUtil.getApplicationContext().getBean("setupDataSource");
                con = ds.getConnection();
                String query;
                if(!con.isClosed()){
                    PreparedStatement ps = con.prepareStatement(query);
                    ps.setObject(1, parentId);

                    ResultSet rs = ps.executeQuery();

                    Item item = null;

                    // looping hasil query 
                    while (rs.next()){
                        item = new Item();
                        item.setId(rs.getString("id"));
                        item.setName(rs.getString("c_name"));
                        item.setQuantity(rs.getString("c_quantity"));
                        item.setPrice(rs.getString("c_price"));
                        list.add(item);
                    }
                }
            } catch (Exception e) {
                LogUtil.error(this.getClassName(), e, e.getMessage());
            } finally{
                if (con != null) {
                    try {
                        con.close();
                    } catch (SQLException ex) {
                        LogUtil.error(this.getClassName(), ex, ex.getMessage());
                    }
                }
            }
            return list;
    }

    private boolean callWebService(Item item, String WSURL){
        boolean result=false;
        // siapkan parameter
        JSONObject param = new JSONObject();
        try{
            param.put("requestId", item.getId());
            param.put("name", item.getName());
            param.put("qty", item.getQuantity());
            param.put("price", item.getPrice());
        } catch (JSONException ex){
            LogUtil.error(this.getClassName(), ex, ex.getMessage());
        }

        // call web services 
        HttpClient client = HttpClientBuilder.create().build();

        HttpPost post = new HttpPost(WSURL);

        StringEntity input;

        try {
            input = new StringEntity(param.toString());
            input.setContentType("application/json");
            post.setEntity(input);

            HttpResponse response = client.execute(post);

            // baca hasil WS call
            BufferedReader rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
            String line , resultInquiry = "";
            while ((line = rd.readLine()) != null) {
                resultInquiry += line;
            }
            // print hasil ws call
            LogUtil.info(this.getClassName(),"print hasil call ws : "+ resultInquiry);
            } catch (UnsupportedEncodingException ex) {
                LogUtil.error(this.getClassName(), ex, ex.getMessage());
            } catch (IOException ex){
                LogUtil.error(this.getClassName(), ex , ex.getLocalizedMessage());
            } finally {
                if (client != null){
                    client.getConnectionManager().shutdown();
                }
            }



        return result;
    }

}
